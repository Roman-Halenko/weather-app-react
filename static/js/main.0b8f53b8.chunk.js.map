{"version":3,"sources":["js/components/ListItem.js","js/components/AutoComplete.js","js/components/Search.js","js/Data.js","js/components/CurrentWeather.js","js/components/WeatherForecast/SingleDayWeather/SingleDayWeather.js","js/components/WeatherForecast/WeatherForecast.js","js/components/App.js","index.js"],"names":["ListItem","_ref","city","select","html","react_default","a","createElement","onClick","dangerouslySetInnerHTML","__html","AutoComplete","state","_this2","this","foundCities","props","className","map","components_ListItem","key","id","Component","Search","_this$props","onSearchInput","onSearcFocus","onSearcBlur","searchFocused","onFocus","onBlur","placeholder","type","onChange","length","components_AutoComplete","apiURL","appID","API","cityID","period","arguments","undefined","concat","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","CurrentWeather","weatherData","availableUnits","isAvailableUnitsShown","getWeatherData","cityId","fetch","then","response","json","dt","country","sys","name","icon","weather","description","temperature","main","temp","_this","setState","toggleAvailableUnitsVisib","prevProps","Object","keys","_this$state$weatherDa","unitName","onUnitChange","blured","dataCalcDate","Date","dataCalcDay","toLocaleDateString","weekday","dataCalcTime","getHours","getMinutes","calcTemperature","padStart","src","alt","unit","SingleDayWeather","day","getTemp","minmax","reduce","acc","temp_min","temp_max","weatherIconCode","weatherIconUrl","weatherDecription","tempMin","tempMax","WeatherForecast","dailyWeatherForecastData","groupWeatherData","data","weekdayName","push","list","catch","err","console","error","WeatherForecast_SingleDayWeather_SingleDayWeather","App","defaultCityId","selectedCityId","temperatureUnit","firebaseApp","firebase","initializeApp","database","userInput","target","value","replace","regex","RegExp","ref","orderByChild","startAt","limitToFirst","once","snap","relevant–°ities","values","val","filter","e","match","forEach","onListItemSelect","selectedCity","setTimeout","changeTemperatureUnit","Math","round","_this$state","Search_Search","CurrentWeather_CurrentWeather","WeatherForecast_WeatherForecast","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.0b8f53b8.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ListItem({city, select}) {\n\n    const {html} = city;\n\n    return (\n        <li onClick={() => select(city)} dangerouslySetInnerHTML={{__html: html}}></li>\n    )\n}\n\nexport default ListItem;\n","import React, {Component} from 'react';\n\nimport ListItem from './ListItem';\n\nclass AutoComplete extends Component {\n\n    state = {};\n\n    render() {\n        const {foundCities} = this.props;\n\n        return (\n            <ul className=\"auto-complete\">\n                {foundCities.map(city => (\n                    <ListItem\n                        select={this.props.select}\n                        key={city.id}\n                        city={city}\n                    />\n                ))}\n            </ul>\n        )\n    }\n}\n\nexport default AutoComplete;\n","import React, {Component} from 'react';\nimport AutoComplete from './AutoComplete';\n\nexport default class Search extends Component {\n\n    render() {\n        const {foundCities, onSearchInput, onSearcFocus, onSearcBlur, searchFocused} = this.props;\n\n        return (\n            <div className='search-bar' onFocus={onSearcFocus} onBlur={onSearcBlur}>\n                <input\n                    placeholder='Search'\n                    className='search-field'\n                    type='search'\n                    onChange={onSearchInput}\n                />\n                {foundCities.length && searchFocused\n                    ? <AutoComplete select={this.props.select} foundCities={foundCities}/>\n                    : null}\n            </div>\n        )\n    }\n}\n","const apiURL = 'https://api.openweathermap.org/data/2.5/';\nconst appID = '1d0043e9a6077c0e96a2cea071bf251b';\n\nexport function API(cityID, period = 'weather') {\n    return `${apiURL + period}?id=${cityID}&APPID=${appID}`;\n}\n\nexport const firebaseConfig = {\n    apiKey: \"AIzaSyAEpkcjRZPTl1kH97sTXc-nkLJ-mJ6DHn8\",\n    authDomain: \"weather-app-f1e4e.firebaseapp.com\",\n    databaseURL: \"https://weather-app-f1e4e.firebaseio.com\",\n    projectId: \"weather-app-f1e4e\",\n    storageBucket: \"weather-app-f1e4e.appspot.com\",\n    messagingSenderId: \"1022251616365\",\n    appId: \"1:1022251616365:web:e347162dfdc34d178e9764\"\n};\n","import React, { Component } from \"react\"\nimport {API} from \"../Data\"\n\n\nexport default class CurrentWeather extends Component {\n    state = {\n        weatherData: {},\n        availableUnits: ['C', 'F', 'K'],\n        isAvailableUnitsShown: false\n    }\n\n    getWeatherData = cityId => {\n        fetch( API(cityId) )\n            .then( response => response.json())\n            .then( response => {\n                let weatherData = {\n                    dt: response.dt,\n                    country: response.sys.country,\n                    name: response.name,\n                    icon: response.weather[0].icon,\n                    description: response.weather[0].description,\n                    temperature: response.main.temp,\n                };\n\n                this.setState({weatherData: weatherData})\n            })\n    }\n\n    toggleAvailableUnitsVisib = () => {\n        this.setState({isAvailableUnitsShown: !this.state.isAvailableUnitsShown});\n    }\n\n    componentDidMount() {\n        this.getWeatherData(this.props.cityId);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.cityId !== prevProps.cityId) {\n            this.getWeatherData(this.props.cityId);\n        }\n    }\n\n    render() {\n        if (Object.keys(this.state.weatherData).length === 0) return null;\n\n        const {dt, icon, description, country, name, temperature} = this.state.weatherData;\n        const {availableUnits} = this.state;\n        const {unitName, onUnitChange, blured} = this.props;\n        const dataCalcDate = new Date(dt*1000);\n        const dataCalcDay = dataCalcDate.toLocaleDateString('en', {weekday: 'long'});\n        const dataCalcTime = `${dataCalcDate.getHours()}:${dataCalcDate.getMinutes()}`;\n        const temp = this.props.calcTemperature(temperature, unitName);\n\n        return (\n            <div className={`content ${blured ? 'blured' : ''}`}>\n                <h1 className=\"title\">{name}, {country}</h1>\n                <span>{dataCalcDay} {dataCalcTime.padStart(2, '0')}</span>\n                <p className=\"description\">{description}</p>\n                <img className=\"weather-icon\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt={description}/>\n                <div className=\"temperature\">{temp}\n                    <ul className=\"temperature-units\">\n                        <li className=\"unit\" onClick={this.toggleAvailableUnitsVisib}>\n                            ¬∞{unitName}\n                        </li>\n                        {this.state.isAvailableUnitsShown\n                            ? availableUnits.map(unit =>\n                                unit !== unitName\n                                    ? <li className=\"unit\" key={unit} onClick={() => onUnitChange(unit)}>¬∞{unit}</li>\n                                    : null)\n                            : null\n                        }\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\nconst SingleDayWeather = ({day, weatherData, unitName, calcTemperature}) => {\n\n    function getTemp(minmax) {\n        return weatherData.reduce((acc, period) => {\n            if (acc === undefined) {\n                if (minmax === 'min') {\n                    acc = period.main.temp_min;\n                } else if (minmax === 'max') {\n                    acc = period.main.temp_max;\n                }\n            } else {\n                if (minmax === 'min') {\n                    acc = period.main.temp_min < acc ? period.main.temp_min : acc;\n                } else if (minmax === 'max') {\n                    acc = period.main.temp_max > acc ? period.main.temp_max : acc;\n                }\n            }\n            return acc;\n        }, undefined);\n    }\n\n    const weatherIconCode = weatherData[0].weather[0].icon;\n    const weatherIconUrl = `http://openweathermap.org/img/wn/${weatherIconCode}@2x.png`;\n    const weatherDecription = weatherData[0].weather[0].description;\n    const tempMin = calcTemperature( getTemp('min'), unitName );\n    const tempMax = calcTemperature( getTemp('max'), unitName );\n\n    return (\n        <li key={weatherData[0].dt}>\n            <div>{day}</div>\n            <img className=\"weather-icon\"\n                src={weatherIconUrl}\n                alt={weatherDecription}\n            />\n            <div>{tempMax}¬∞\n                <span className=\"min-temp\"> {tempMin}¬∞</span>\n            </div>\n            \n        </li>\n    )\n}\n\nexport default SingleDayWeather;","import React, { Component } from 'react'\nimport {API} from '../../Data'\nimport {SingleDayWeather} from './SingleDayWeather'\n\n\nexport default class WeatherForecast extends Component {\n    state = {\n        dailyWeatherForecastData: {},\n    }\n\n    groupWeatherData = data => {\n        return data.reduce((acc, period) => {\n            let calcDate = new Date(period.dt*1000);\n            let weekdayName = calcDate.toLocaleDateString('en', {weekday: 'long'});\n\n            if (!acc[`${weekdayName}`]) {\n                acc[`${weekdayName}`] = [];\n            };\n            acc[`${weekdayName}`].push(period);\n\n            return acc;\n        }, {})\n    }\n\n    getWeatherData = cityId => {\n        fetch( API(cityId, 'forecast') )\n            .then( response => response.json())\n            .then( response => {\n                let dailyWeatherForecastData = this.groupWeatherData(response.list);\n                this.setState({dailyWeatherForecastData: dailyWeatherForecastData})\n            })\n            .catch(err => console.error(err))\n    }\n\n    componentDidMount() {\n        this.getWeatherData(this.props.cityId);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.cityId !== prevProps.cityId) {\n            this.getWeatherData(this.props.cityId);\n        }\n    }\n\n    render() {\n        const {unitName} = this.props;\n        const data = this.state.dailyWeatherForecastData;\n\n        if (Object.keys(data).length === 0) return null;\n\n        return (\n            <ul className=\"weather-forecast\">\n                {Object.keys(data).map(day => \n                    <SingleDayWeather\n                        key={day} day={day}\n                        weatherData={data[day]}\n                        unitName={unitName}\n                        calcTemperature={this.props.calcTemperature}\n                    />\n                )}\n            </ul>\n        );\n    }\n}\n","import React, { Component } from \"react\"\nimport Search from \"./Search\"\nimport {firebaseConfig} from '../Data';\nimport CurrentWeather from \"./CurrentWeather\"\nimport {WeatherForecast} from \"./WeatherForecast\"\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n\nexport default class App extends Component {\n\n    state = {\n        defaultCityId: 703447,\n        selectedCityId: null,\n        foundCities: [],\n        searchFocused: false,\n        temperatureUnit: 'C'\n    }\n\n    firebaseApp = firebase.initializeApp(firebaseConfig);\n    database = this.firebaseApp.database();\n\n    onSearchInput = ( {target} ) => {\n        let userInput = target.value.replace(/[^\\w\\s]/gi, '');\n        if (userInput === '' || userInput === ' ') {\n            this.setState({foundCities: []});\n        } else {\n            let regex = new RegExp(userInput, 'i');\n            this.database.ref('/').orderByChild('name')\n                .startAt(userInput)\n                .limitToFirst(6)\n                .once('value', snap => {\n                    let relevant–°ities = Object.values(snap.val())\n                        .filter(e => e.name.match(regex));\n\n                    relevant–°ities.forEach(e => {\n                        e.html = e.name.replace(regex, match =>\n                            `<u>${match}</u>`) + `, ${e.country}`;\n                        });\n\n                    this.setState({foundCities: relevant–°ities});\n                });\n        }\n    }\n\n    onListItemSelect = selectedCity => {\n        this.setState({selectedCityId: selectedCity.id});\n    }\n\n    onSearcFocus = () => {\n        this.setState({searchFocused: true});\n    }\n\n    onSearcBlur = () => {\n        setTimeout(() => {\n            this.setState({searchFocused: false})\n        }, 100)\n    }\n\n    changeTemperatureUnit = unit => {\n        this.setState({temperatureUnit: unit})\n    }\n\n    calcTemperature = (value, unitName) => {\n\n        switch (unitName) {\n            case 'C': value -= 273.15; break;\n            case 'F': value = value * 9/5 - 459.67; break;\n            default: break;\n        }\n\n        return Math.round(value);\n    }\n\n    render() {\n        const { selectedCityId,\n            defaultCityId,\n            foundCities,\n            searchFocused,\n            temperatureUnit } = this.state\n\n        return (\n            <div className=\"container backdrop-blur\">\n                <Search\n                    select={this.onListItemSelect}\n                    onSearchInput={this.onSearchInput}\n                    onSearcFocus={this.onSearcFocus}\n                    onSearcBlur={this.onSearcBlur}\n                    foundCities={foundCities}\n                    searchFocused={searchFocused}\n                />\n                <CurrentWeather\n                    cityId={selectedCityId || defaultCityId}\n                    blured={foundCities.length > 0 && searchFocused ? true : false}\n                    unitName={temperatureUnit}\n                    onUnitChange={this.changeTemperatureUnit}\n                    calcTemperature={this.calcTemperature}\n                />\n                <WeatherForecast\n                    cityId={selectedCityId || defaultCityId}\n                    unitName={temperatureUnit}\n                    calcTemperature={this.calcTemperature}\n                />\n            </div>\n        );\n    }\n}\n","import React from 'react'\nimport {render} from 'react-dom'\nimport App from './js/components/App'\nimport './sass/main.sass'\n\nrender(<App/>, document.getElementById('app'))\n"],"sourceRoot":""}