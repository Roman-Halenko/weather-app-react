{"version":3,"sources":["js/components/ListItem.js","js/components/AutoComplete.js","js/components/Search.js","js/Data.js","js/components/CurrentWeather.js","js/components/App.js","index.js"],"names":["ListItem","_ref","city","select","html","react_default","a","createElement","onClick","dangerouslySetInnerHTML","__html","AutoComplete","state","_this2","this","foundCities","props","className","map","components_ListItem","key","id","Component","Search","_this$props","onSearchInput","type","onChange","length","components_AutoComplete","apiURL","appID","cityList","require","CurrentWeather","data","getWeatherData","cityId","fetch","then","response","json","_this","setState","prevProps","name","country","sys","icon","weather","concat","blured","src","alt","App","defaultCityId","selectedCityId","userInput","target","value","replace","regex","RegExp","closestCities","filter","e","match","sort","slice","forEach","onListItemSelect","selectedCity","_this$state","Search_Search","CurrentWeather_CurrentWeather","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.b299ad3d.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ListItem({city, select}) {\n\n    const {html} = city;\n\n    return (\n        <li onClick={() => select(city)} dangerouslySetInnerHTML={{__html: html}}></li>\n    )\n}\n\nexport default ListItem;\n","import React, {Component} from 'react';\n\nimport ListItem from './ListItem';\n\nclass AutoComplete extends Component {\n\n    state = {};\n\n    render() {\n        const {foundCities} = this.props;\n\n        return (\n            <ul className=\"hint-list\">\n                {foundCities.map(city => (\n                    <ListItem\n                        select={this.props.select}\n                        key={city.id}\n                        city={city}\n                    />\n                ))}\n            </ul>\n        )\n    }\n}\n\nexport default AutoComplete;\n","import React, {Component} from 'react';\nimport AutoComplete from './AutoComplete';\n\nexport default class Search extends Component {\n\n    render() {\n        const {foundCities, onSearchInput} = this.props;\n\n        return (\n            <div className='search-bar'>\n                <input\n                    className='search-field'\n                    type='search'\n                    onChange={onSearchInput}\n                />\n                {foundCities.length\n                    ? <AutoComplete select={this.props.select} foundCities={foundCities}/>\n                    : null}\n            </div>\n        )\n    }\n}\n","const apiURL = 'https://api.openweathermap.org/data/2.5/weather?id=';\nconst appID = '&APPID=1d0043e9a6077c0e96a2cea071bf251b';\n\nexport function API(cityId) {\n    return (apiURL + cityId + appID);\n}\n\nexport const cityList = require('./city.list.json');\n","import React, { Component } from \"react\"\nimport {API} from \"../Data\"\n\n\nexport default class CurrentWeather extends Component {\n    state = {\n        data: {}\n    }\n\n    getWeatherData = (id) => {\n        fetch( API(id) )\n            .then(response => response.json())\n            .then(response => this.setState({ data: response }))\n    }\n\n    componentDidMount() {\n        this.getWeatherData(this.props.cityId);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.cityId !== prevProps.cityId) {\n            this.getWeatherData(this.props.cityId);\n        }\n    }\n\n    render() {\n        const {name} = this.state.data;\n        const {country} = this.state.data.sys ? this.state.data.sys : '';\n        const {icon} = this.state.data.weather ? this.state.data.weather[0] : '';\n        return (\n            <div className={`content ${this.props.blured ? 'blured' : ''}`}>\n                <h1 className=\"title\">{name+' ('+country+')'}</h1>\n                <img className=\"weather-icon\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"not yet\"/>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\"\nimport Search from \"./Search\"\nimport {cityList} from '../Data';\nimport CurrentWeather from \"./CurrentWeather\"\n\n\nexport default class App extends Component {\n\n    state = {\n        defaultCityId: 703447,\n        selectedCityId: null,\n        foundCities: []\n    }\n\n    onSearchInput = ( {target} ) => {\n        let userInput = target.value.replace(/[^\\w\\s]/gi, '');\n        if (userInput === '' || userInput === ' ') {\n            this.setState({foundCities: []});\n        } else {\n            let regex = new RegExp(userInput, 'i');\n            let relevantСities = cityList.filter( e => e.name.match(regex) ).sort();\n            let closestCities = relevantСities.slice(0, 6);\n            closestCities.forEach(e => {\n                e.html = e.name.replace(regex, match => `<u>${match}</u>`) + `, ${e.country}`\n            });\n            this.setState({foundCities: closestCities});\n        }\n    }\n\n    onListItemSelect = selectedCity => {\n        this.setState({selectedCityId: selectedCity.id});\n    }\n\n    render() {\n        const {selectedCityId, defaultCityId, foundCities} = this.state\n\n        return (\n            <div className=\"container backdrop-blur\">\n                <Search\n                    select={this.onListItemSelect}\n                    onSearchInput={this.onSearchInput}\n                    foundCities={foundCities}\n                />\n                <CurrentWeather\n                    cityId={selectedCityId || defaultCityId}\n                    blured={foundCities.length > 0 ? true : false}\n                />\n            </div>\n        );\n    }\n}\n","import React from 'react'\nimport {render} from 'react-dom'\nimport App from './js/components/App'\nimport './sass/main.sass'\n\nrender(<App/>, document.getElementById('app'))\n"],"sourceRoot":""}