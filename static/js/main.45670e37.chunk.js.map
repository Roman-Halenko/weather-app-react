{"version":3,"sources":["js/components/ListItem.js","js/components/AutoComplete.js","js/components/Search.js","js/Data.js","js/components/CurrentWeather.js","js/components/App.js","index.js"],"names":["ListItem","_ref","city","select","name","country","react_default","a","createElement","onClick","AutoComplete","state","_this2","this","foundCities","props","className","map","components_ListItem","key","id","Component","Search","_this$props","onSearchInput","type","onChange","length","components_AutoComplete","apiURL","appID","cityList","require","CurrentWeather","data","getWeatherData","cityId","fetch","then","response","json","_this","setState","prevProps","sys","icon","weather","concat","blured","src","alt","App","defaultCityId","selectedCityId","target","value","regex","RegExp","closestCities","filter","e","match","sort","slice","onListItemSelect","selectedCity","_this$state","Search_Search","CurrentWeather_CurrentWeather","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.45670e37.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ListItem({city, select}) {\n\n    const {name, country} = city;\n\n    return (\n        <li onClick={() => select(city)}>{name}, {country}</li>\n    )\n}\n\nexport default ListItem;\n","import React, {Component} from 'react';\n\nimport ListItem from './ListItem';\n\nclass AutoComplete extends Component {\n\n    state = {};\n\n    render() {\n        const {foundCities} = this.props;\n\n        return (\n            <ul className=\"hint-list\">\n                {foundCities.map(city => (\n                    <ListItem\n                        select={this.props.select}\n                        key={city.id}\n                        city={city}\n                    />\n                ))}\n            </ul>\n        )\n    }\n}\n\nexport default AutoComplete;\n","import React, {Component} from 'react';\nimport AutoComplete from './AutoComplete';\n\nexport default class Search extends Component {\n\n    render() {\n        const {foundCities, onSearchInput} = this.props;\n\n        return (\n            <div className='search-bar'>\n                <input\n                    className='search-field'\n                    type='search'\n                    onChange={onSearchInput}\n                />\n                {foundCities.length > 0\n                    ? <AutoComplete select={this.props.select} foundCities={foundCities}/>\n                    : ''}\n            </div>\n        )\n    }\n}\n","const apiURL = 'https://api.openweathermap.org/data/2.5/weather?id=';\nconst appID = '&APPID=1d0043e9a6077c0e96a2cea071bf251b';\n\nexport function API(cityId) {\n    return (apiURL + cityId + appID);\n}\n\nexport const cityList = require('./city.list.json');\n","import React, { Component } from \"react\"\nimport {API} from \"../Data\"\n\n\nexport default class CurrentWeather extends Component {\n    state = {\n        data: {}\n    }\n\n    getWeatherData = (id) => {\n        fetch( API(id) )\n            .then(response => response.json())\n            .then(response => this.setState({ data: response }))\n    }\n\n    componentDidMount() {\n        this.getWeatherData(this.props.cityId);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.cityId !== prevProps.cityId) {\n            this.getWeatherData(this.props.cityId);\n        }\n    }\n\n    render() {\n        const {name} = this.state.data;\n        const {country} = this.state.data.sys ? this.state.data.sys : '';\n        const {icon} = this.state.data.weather ? this.state.data.weather[0] : '';\n        return (\n            <div className={`content ${this.props.blured ? 'blured' : ''}`}>\n                <h1 className=\"title\">{name+' ('+country+')'}</h1>\n                <img className=\"weather-icon\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"not yet\"/>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\"\nimport Search from \"./Search\"\nimport {cityList} from '../Data';\nimport CurrentWeather from \"./CurrentWeather\"\n\n\nexport default class App extends Component {\n\n    state = {\n        defaultCityId: 703447,\n        selectedCityId: null,\n        foundCities: []\n    }\n\n    onSearchInput = ( {target} ) => {\n        if (target.value === '' || target.value === ' ') {\n            this.setState({foundCities: []});\n        } else {\n            let regex = new RegExp(`^${target.value}`, 'i');\n            let relevantСities = cityList.filter(e => e.name.match(regex)).sort();\n            let closestCities = relevantСities.slice(0, 6);\n            this.setState({foundCities: closestCities});\n        }\n    }\n\n    onListItemSelect = selectedCity => {\n        this.setState({selectedCityId: selectedCity.id});\n    }\n\n    render() {\n        const {selectedCityId, defaultCityId, foundCities} = this.state\n\n        return (\n            <div className=\"container backdrop-blur\">\n                <Search\n                    select={this.onListItemSelect}\n                    onSearchInput={this.onSearchInput}\n                    foundCities={foundCities}\n                />\n                <CurrentWeather\n                    cityId={selectedCityId || defaultCityId}\n                    blured={foundCities.length > 0 ? true : false}\n                />\n            </div>\n        );\n    }\n}\n","import React from 'react'\nimport {render} from 'react-dom'\nimport App from './js/components/App'\nimport './sass/main.sass'\n\nrender(<App/>, document.getElementById('app'))\n"],"sourceRoot":""}